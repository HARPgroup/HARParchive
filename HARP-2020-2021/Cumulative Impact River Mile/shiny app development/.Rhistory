'PU2_2840_3080','PU2_3080_3640','PU2_3090_4050','PU2_3140_3680',
'PU2_3180_3370','PU2_3370_4020','PU2_3630_3590','PU2_3770_3600',
'PU2_3900_3750','PU2_4050_4180','PU2_4160_3930','PU2_4220_3900',
'PU2_4340_3860','PU2_4360_4160','PU2_4720_4750','PU2_4730_4220',
'PU2_5190_4310','PU2_5700_5210','PU2_6050_5190',
'PU3_2510_3290','PU3_3290_3390','PU3_3390_3730','PU3_3680_3890',
'PU3_3860_3610','PU3_4280_3860','PU3_4450_4440','PU3_5210_5050',
'PU4_3780_3930','PU4_3890_3990','PU4_3970_3890','PU4_3990_3780',
'PU4_4210_4170','PU4_4310_4210','PU4_4440_3970','PU4_5050_4310',
'PU5_3930_4170','PU5_4170_4020','PU6_3440_3590','PU6_3530_3440',
'PU6_3590_3640','PU6_3600_3602','PU6_3602_3730','PU6_3610_3530',
'PU6_3640_3600','PU6_3690_3610','PU6_3730_3750','PU6_3750_3752',
'PU6_3752_4080','PU6_3870_3690','PU6_4020_3870','PU6_4080_4180',
'PU6_4180_4150','JA0_7291_7290','JA2_7290_0001','JA1_7600_7570',
'JA1_7640_7280','JA2_7410_7470','JA2_7550_7280','JA2_7570_7480',
'JA4_7280_7340','JA4_7340_7470','JA4_7470_7480','JA5_7480_0001',
'JB3_6820_7053','JB3_7053_0001','PL1_4460_4780','PL1_4780_0001',
'JL1_6560_6440','JL1_6760_6910','JL1_6770_6850','JL1_6910_6960',
'JL1_6940_7200','JL1_7080_7190','JL1_7170_6800','JL1_7190_7250',
'JL1_7200_7250','JL1_7530_7430','JL2_6240_6520','JL2_6440_6441',
'JL2_6441_6520','JL2_6850_6890','JL2_7110_7120','JL2_7120_6970',
'JL2_7240_7350','JL2_7250_7090','JL2_7350_7090','JL3_7020_7100',
'JL3_7090_7150','JL4_6520_6710','JL4_6710_6740','JL6_6740_7100',
'JL6_6890_6990','JL6_6960_6970','JL6_6970_6740','JL6_6990_6960',
'JL6_7150_6890','JL6_7160_7440','JL6_7320_7150','JL6_7430_7320',
'JL6_7440_7430','JL7_6800_7070','JL7_7030_6800','JL7_7070_0001',
'JL7_7100_7030','JU1_6290_6590','JU1_6300_6650','JU1_6340_6650',
'JU1_6590_6600','JU1_6880_7260','JU1_7560_7500','JU1_7630_7490',
'JU1_7690_7490','JU1_7750_7560','JU2_6410_6640','JU2_6600_6810',
'JU2_6810_6900','JU2_7140_7330','JU2_7180_7380','JU2_7360_7000',
'JU2_7450_7360','JU3_6380_6900','JU3_6640_6790','JU3_6650_7300',
'JU3_6790_7260','JU3_6900_6950','JU3_6950_7330','JU3_7400_7510',
'JU3_7490_7400','JU4_7000_7300','JU4_7260_7380','JU4_7330_7000',
'JU4_7380_7160','JU5_7300_7510','JU5_7420_7160','JU5_7500_7420',
'JU5_7510_7500','PL0_5141_5140','PL1_5370_5470','PL2_4970_5250',
'PL2_5140_5360','PL2_5470_5360','PL3_5250_0001','PL3_5360_5250',
'PL0_5010_5130','PL1_5130_0001','PL0_5490_0001','PL0_5540_5490',
'PL2_5300_5630','PL2_5630_0001','PL0_5730_5690','PL1_5690_0001',
'PL0_5530_5710','PL0_5710_0001','RU2_5220_5640','RU2_5500_5610',
'RU2_5810_5610','RU2_5940_6200','RU2_6090_6220','RU2_6200_6170',
'RU2_6220_6170','RU3_5610_5640','RU3_6170_6040','RU4_5640_6030',
'RU4_6040_6030','RU5_6030_0001','XU0_4090_4270','XU0_4091_4270',
'XU0_4130_4070','XU2_4070_4330','XU2_4270_4650','XU2_4330_4480',
'XU2_4480_4650','XU3_4650_0001','YM1_6370_6620','YM2_6120_6430',
'YM3_6430_6620','YM4_6620_0001','YP1_6570_6680','YP1_6680_6670',
'YP2_6390_6330','YP3_6330_6700','YP3_6470_6690','YP3_6670_6720',
'YP3_6690_6720','YP3_6700_6670','YP4_6720_6750','YP4_6750_0001',
'YP0_6840_0001','YP0_6860_6840',
'EL0_5400_0001','EL1_5150_0001',
'EL1_5430_0001','EL1_5570_0001','EL1_6000_0001','JB0_7051_0001',
'JB0_7052_0001','JB1_8090_0001','JB2_7800_0001','PL0_4510_0001',
'PL0_5000_0001','PL0_5070_0001','PL0_5510_0001','PL0_5720_0001',
'PL0_5750_0001','PL0_5830_0001','PL1_4540_0001','PL1_5230_0001',
'PL1_5910_0001','RL0_6540_0001','RL1_6180_0001','YL2_6580_0001',
'PU1_4760_4451','PU2_4750_4451','PU3_4451_4450','PM1_3711_3710',
'PM1_4251_4250','PM1_4252_4250')
#Finding headwater and all downstring river segments
upstream <- data.frame((fn_ALL.upstream(riv_seg, AllSegList)))
upstream <- upstream[nrow(upstream):1,]
upstream <- data.frame(upstream)
names(upstream)[names(upstream) == colnames(upstream)[1]] <- "riv_seg"
upstream <- as.character(upstream[[1,1]])
if(upstream == 'NA'){
riv_seg <- riv_seg
}else {
riv_seg <- upstream
}
downstream <- data.frame(fn_ALL.downstream(riv_seg, AllSegList))
names(downstream)[names(downstream) == colnames(downstream)[1]] <- "riv_seg"
riv_seg <- as.data.frame(riv_seg)
river <- rbind(riv_seg, downstream)
#setting up dataframe for om_vahydro_metric_grid
df <- data.frame(
'model_version' = c('vahydro-1.0'),
'runid' = c(paste0('runid_', runid1), paste0('runid_', runid2), paste0('runid_', runid1), paste0('runid_', runid2),
paste0('runid_', runid1), paste0('runid_', runid2), paste0('runid_', runid1), paste0('runid_', runid2), '0.%20River%20Channel', 'local_channel'),
'runlabel' = c('flow1', 'flow2','Qbaseline1','Qbaseline2', 'wd_mgd1','wd_mgd2','ps_mgd1','ps_mgd2', 'length', 'subcomp_da'),
'metric' = c( flow_metric, flow_metric, 'Qbaseline','Qbaseline',
'wd_mgd', 'wd_mgd','ps_mgd', 'ps_mgd', 'length', 'drainage_area')
)
#importing dataframe of river segment metrics
wshed_data <- om_vahydro_metric_grid(metric, df)
#triming dataframe to just river segments on river of interest
cia_data <- sqldf("SELECT * FROM river join wshed_data
WHERE riverseg like riv_seg")
#Convert length column to miles
cia_data$length <- cia_data$length/5280
#pull the values that exist from length and subcomp_da (One of the two will be NA for each segment)
da_data <- sqldf("SELECT pid, length, subcomp_da,
CASE
WHEN length is null then subcomp_da
ELSE length
END as da
from cia_data")
#selecting the values that are positive
cia_data$length <- da_data$da
#Adding length segments together to form river mile column
i <- 1
while (i <= nrow(cia_data)) {
river_length <- c()
# Loop creates vector of current segment and upstream segment lengths
for (n in 1:i) {
n_length <- as.numeric(cia_data$length[n])
river_length <- c(river_length, n_length)
}
# Makes length column to total length to segment from start of river
cia_data$mile[i] <- sum(river_length)
i <- i + 1
}
res <- list(cia_data)
}
cia_data <- CIA_data(riv_seg = input$riv_seg, runid1 = input$runid1, runid2 = input$runid2, flow_metric = input$flow_metric)
})
output$plot <- renderPlotly({
cia_list <-  mydata()
cia_df<- data.frame(cia_list)
library(ggplot2)
library(plotly)
p<-ggplot(cia_df, aes(x = mile)) +
geom_point(aes(y = flow1, colour = paste0('Runid',input$runid1), text=propname)) +
geom_line(aes(y = flow1, colour = paste0('Runid',input$runid1))) +
geom_point(aes(y = flow2, colour = paste0('Runid',input$runid2), text= propname)) +
geom_line(aes(y = flow2, colour = paste0('Runid',input$runid2))) +
labs(colour = 'Legend') +
ggtitle(paste('Comparison of', (input$flow_metric), 'Flow')) +
xlab('River Mile [mi]') +
ylab(paste0('Flow [cfs]'))
ggplotly(p, tooltip = c("text", "mile", "flow1", "flow2"))
})
output$table <- DT :: renderDataTable({
cia_list <-  mydata()
cia_df<- data.frame(cia_list)
is.num <- sapply(cia_df, is.numeric)
cia_df[is.num] <- lapply(cia_df[is.num], round, 3)
cia_data_table <- data.frame(cia_df$propname, cia_df$riv_seg, cia_df$mile, cia_df$flow1, cia_df$flow2,
cia_df$Qbaseline1, cia_df$Qbaseline2, cia_df$wd_mgd1, cia_df$wd_mgd2,
cia_df$ps_mgd1, cia_df$ps_mgd2)
datatable(cia_data_table, class="compact cell-border", colnames= c("Segment Name","Riverseg","River Mile","Q1","Q2","Qbaseline1",
"Qbaseline2","wd_mgd1","wd_mgd2","ps_mgd1","ps_mgd2"), options = list("pageLength" = 25))
})
output$map <- renderImage(
map_layers <- load_MapLayers(site = site), #WARNING - DO NOT ATTEMPT TO OUTPUT map_layers DIRECTLY TO YOUR CONSOLE, ITS A LIST OF MANY LARGE MAPPING LAYERS
cia_map <- CIA_maps(cia_data = cia_data, map_layers = map_layers),
ggsave(paste0(export_path,riv_seg,"_cia_map.png",sep = ""), width=5.5, height=5)
)
}
# Run the application
shinyApp(ui = ui, server = server)
site <- "http://deq2.bse.vt.edu/d.dh"
basepath <-'/var/www/R'
source(paste(basepath,'config.R',sep='/'))
source(paste(github_location,"/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/CIA_maps.R",sep = '/'))
install.packages("kableExtra")
#RUN THIS BEFORE CLICKLING "RUN APP"
site <- "http://deq2.bse.vt.edu/d.dh"
basepath <-'/var/www/R'
source(paste(basepath,'config.R',sep='/'))
source(paste(github_location,"/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/CIA_maps.R",sep = '/'))
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
install.packages("wicket")
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
install.packages("magick")
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
devtools::install_github("ropensci/wicket")
######################################################################################################
# LOAD MAP LAYERS
######################################################################################################
load_MapLayers <- function(site){
library(ggplot2)
library(rgeos)
library(ggsn)
library(rgdal) # needed for readOGR()
library(dplyr) # needed for case_when()
library(sf) # needed for st_read()
library(sqldf)
library(kableExtra)
library(viridis) #magma
library(wicket) #wkt_centroid()
library(cowplot) #plot static legend
library(magick) #plot static legend
library(ggrepel) #needed for geom_text_repel()
library(ggmap) #used for get_stamenmap, get_map
#DOWNLOAD STATES AND MINOR BASIN LAYERS DIRECT FROM GITHUB
print(paste("DOWNLOADING STATES AND MINOR BASIN LAYERS DIRECT FROM GITHUB...",sep=""))
STATES <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/HARParchive/master/GIS_layers/STATES.tsv', sep = '\t', header = TRUE)
MinorBasins.csv <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/HARParchive/master/GIS_layers/MinorBasins.csv', sep = ',', header = TRUE)
#DOWNLOAD RSEG LAYER DIRECT FROM VAHYDRO
print(paste("DOWNLOADING RSEG LAYER DIRECT FROM VAHYDRO...",sep=""))
localpath <- tempdir()
filename <- paste("vahydro_riversegs_export.csv",sep="")
destfile <- paste(localpath,filename,sep="\\")
download.file(paste(site,"/vahydro_riversegs_export",sep=""), destfile = destfile, method = "libcurl")
RSeg.csv <- read.csv(file=paste(localpath , filename,sep="\\"), header=TRUE, sep=",")
#DOWNLOAD MAJORRIVERS LAYER DIRECT FROM GITHUB
print(paste("DOWNLOADING MAJORRIVERS LAYER DIRECT FROM GITHUB...",sep=""))
MajorRivers.csv <- read.table(file = 'https://raw.githubusercontent.com/HARPgroup/HARParchive/master/GIS_layers/MajorRivers.csv', sep = ',', header = TRUE)
#DOWNLOAD FIPS LAYER DIRECT FROM VAHYDRO
print(paste("DOWNLOADING FIPS LAYER DIRECT FROM VAHYDRO...",sep=""))
fips_filename <- paste("vahydro_usafips_export.csv",sep="")
fips_destfile <- paste(localpath,fips_filename,sep="\\")
download.file(paste(site,"/usafips_centroid_export",sep=""), destfile = fips_destfile, method = "libcurl")
fips.csv <- read.csv(file=paste(localpath , fips_filename,sep="\\"), header=TRUE, sep=",")
#DOWNLOAD RESERVOIR LAYER FROM LOCAL REPO
print(paste("DOWNLOADING RESERVOIR LAYER FROM LOCAL REPO...",sep=""))
WBDF <- read.table(file=paste(github_location,"HARPArchive/GIS_layers","WBDF.csv",sep="/"), header=TRUE, sep=",")
#LOAD ANY ADDITIONL MAPPING FUNCTIONS
source(paste(vahydro_location,"R/wsp/wsp2020/FoundationDataset/geo_summaries/mb.extent.R",sep = '/'))
layers <- list("STATES" = STATES,
"MinorBasins.csv" = MinorBasins.csv,
"RSeg.csv" = RSeg.csv,
"MajorRivers.csv" = MajorRivers.csv,
"fips.csv" = fips.csv,
"WBDF" = WBDF
)
return(layers)
}
######################################################################################################
# GENERATE MAP
######################################################################################################
CIA_maps <- function(cia_data,map_layers){
# LOAD MAP LAYERS FROM THE map_layers LIST
STATES <- map_layers[[which(names(map_layers) == "STATES")]]
MinorBasins.csv <- map_layers[[which(names(map_layers) == "MinorBasins.csv")]]
RSeg.csv <- map_layers[[which(names(map_layers) == "RSeg.csv")]]
MajorRivers.csv <- map_layers[[which(names(map_layers) == "MajorRivers.csv")]]
fips.csv <- map_layers[[which(names(map_layers) == "fips.csv")]]
WBDF <- map_layers[[which(names(map_layers) == "WBDF")]]
# SELECT MINOR BASIN CODE
mb_code <- sqldf(paste('SELECT substr(riv_seg, 1, 2) AS code
FROM cia_data
LIMIT 1'
)
)
minorbasin <- as.character(mb_code)
print(paste("PROCESSING: ",minorbasin,sep=""))
######################################################################################################
# DETERMINE MAP EXTENT FROM MINOR BASIN CENTROID
extent <- mb.extent(minorbasin,MinorBasins.csv)
######################################################################################################
# BOUNDING BOX
bb=readWKT(paste0("POLYGON((",extent$x[1]," ",extent$y[1],",",extent$x[2]," ",extent$y[1],",",extent$x[2]," ",extent$y[2],",",extent$x[1]," ",extent$y[2],",",extent$x[1]," ",extent$y[1],"))",sep=""))
bbProjected <- SpatialPolygonsDataFrame(bb,data.frame("id"), match.ID = FALSE)
bbProjected@data$id <- rownames(bbProjected@data)
bbPoints <- fortify(bbProjected, region = "id")
bbDF <- merge(bbPoints, bbProjected@data, by = "id")
######################################################################################################
### PROCESS STATES LAYER  ############################################################################
######################################################################################################
# NEED TO REMOVE INDIANA DUE TO FAULTY GEOM
STATES <- sqldf(paste('SELECT * FROM STATES WHERE state != "IN"',sep=""))
STATES$id <- as.numeric(rownames(STATES))
state.list <- list()
for (i in 1:length(STATES$state)) {
state_geom <- readWKT(STATES$geom[i])
state_geom_clip <- gIntersection(bb, state_geom)
if (is.null(state_geom_clip) == TRUE) {
# print("STATE OUT OF MINOR BASIN EXTENT - SKIPPING")
next
}
stateProjected <- SpatialPolygonsDataFrame(state_geom_clip, data.frame('id'), match.ID = TRUE)
stateProjected@data$id <- as.character(i)
state.list[[i]] <- stateProjected
}
length(state.list)
#REMOVE THOSE STATES THAT WERE SKIPPED ABOVE (OUT OF MINOR BASIN EXTENT)
state.list <- state.list[which(!sapply(state.list, is.null))]
length(state.list)
state <- do.call('rbind', state.list)
state@data <- merge(state@data, STATES, by = 'id')
state@data <- state@data[,-c(2:3)]
state.df <- fortify(state, region = 'id')
state.df <- merge(state.df, state@data, by = 'id')
######################################################################################################
### PROCESS Minor Basin LAYER  #######################################################################
######################################################################################################
mb_data <- MinorBasins.csv
MB_df_sql <- paste('SELECT *
FROM mb_data
WHERE code = "',minorbasin,'"'
,sep="")
if (minorbasin == "ES") {
print("COMBINING 2 EASTERN SHORE MINOR BASINS")
MB_df_sql <- paste('SELECT * FROM mb_data WHERE code = "ES" OR code = "EL"' ,sep="")
}
mb_data <- sqldf(MB_df_sql)
mb_data$id <- as.character(row_number(mb_data$code))
MB.list <- list()
for (z in 1:length(mb_data$code)) {
MB_geom <- readWKT(mb_data$geom[z])
MB_geom_clip <- gIntersection(bb, MB_geom)
MBProjected <- SpatialPolygonsDataFrame(MB_geom_clip, data.frame('id'), match.ID = TRUE)
MBProjected@data$id <- as.character(z)
MB.list[[z]] <- MBProjected
}
MB <- do.call('rbind', MB.list)
MB@data <- merge(MB@data, mb_data, by = 'id')
MB@data <- MB@data[,-c(2:3)]
MB.df <- fortify(MB, region = 'id')
MB.df <- merge(MB.df, MB@data, by = 'id')
######################################################################################################
### PROCESS FIPS LAYER  #############################################################################
######################################################################################################
fips_layer <- fips.csv
fips_layer$id <- fips_layer$fips_hydroid
fips.list <- list()
for (f in 1:length(fips_layer$fips_hydroid)) {
fips_geom <- readWKT(fips_layer$fips_centroid[f])
fips_geom_clip <- gIntersection(MB_geom, fips_geom) #SHOW ONLY FIPS NAMES WITHIN MINOR BASIN
if (is.null(fips_geom_clip) == TRUE) {
# print("FIPS OUT OF MINOR BASIN EXTENT - SKIPPING")
next
}
fipsProjected <- SpatialPointsDataFrame(fips_geom_clip, data.frame('id'), match.ID = TRUE)
fipsProjected@data$id <- as.character(fips_layer[f,]$id)
fips.list[[f]] <- fipsProjected
}
length(fips.list)
#REMOVE THOSE FIPS THAT WERE SKIPPED ABOVE (OUT OF MINOR BASIN EXTENT)
fips.list <- fips.list[which(!sapply(fips.list, is.null))]
length(fips.list)
if (length(fips.list) != 0) {
#  print("NO FIPS GEOMS WITHIN MINOR BASIN EXTENT - SKIPPING")
fips <- do.call('rbind', fips.list)
fips@data <- merge(fips@data, fips_layer, by = 'id')
fips@data <- fips@data[,-c(2:3)]
fips.df <- data.frame(fips)
} else {
print("NO FIPS GEOMS WITHIN MINOR BASIN EXTENT")
fips.df <- data.frame(id=c(1,2),
fips_latitude =c(1,2),
fips_longitude =c(1,2),
fips_name = c(1,2),
stringsAsFactors=FALSE)
}
######################################################################################################
### PROCESS MajorRivers.csv LAYER  ###################################################################
######################################################################################################
rivs_layer <- MajorRivers.csv
riv.centroid.df <-  data.frame(feature=rivs_layer$feature,
GNIS_NAME=rivs_layer$GNIS_NAME,
centroid_longitude="",
centroid_latitude="",
stringsAsFactors=FALSE)
rivs_layer$id <- rivs_layer$feature
rivs.list <- list()
for (r in 1:length(rivs_layer$feature)) {
riv_geom <- readWKT(rivs_layer$geom[r])
riv_geom_centroid <- gCentroid(riv_geom,byid=TRUE)
riv.centroid.df$centroid_longitude[r] <- riv_geom_centroid$x
riv.centroid.df$centroid_latitude[r] <- riv_geom_centroid$y
# riv_geom_clip <- gIntersection(MB_geom, riv_geom)
riv_geom_clip <- riv_geom
if (is.null(riv_geom_clip) == TRUE) {
# print("OUT OF MINOR BASIN EXTENT - SKIPPING")
next
}
rivProjected <- SpatialLinesDataFrame(riv_geom_clip, data.frame('id'), match.ID = TRUE)
rivProjected@data$id <-  as.character(rivs_layer[r,]$id)
rivs.list[[r]] <- rivProjected
}
length(rivs.list)
#REMOVE THOSE rivs_layer THAT WERE SKIPPED ABOVE (OUT OF MINOR BASIN EXTENT)
rivs.list <- rivs.list[which(!sapply(rivs.list, is.null))]
length(rivs.list)
rivs <- do.call('rbind', rivs.list)
rivs@data <- merge(rivs@data, rivs_layer, by = 'id')
rivs.df <- rivs
######################################################################################################
### PROCESS RSegs
######################################################################################################
RSeg_data <- paste('SELECT *
FROM "RSeg.csv" AS a
LEFT OUTER JOIN cia_data AS b
ON (a.hydrocode = b.hydrocode)
WHERE a.hydrocode LIKE "%wshed_',minorbasin,'%"
ORDER BY hydroid ASC
',sep = '')
RSeg_data <- sqldf(RSeg_data)
# NEED TO REMOVE SECOND "hydrocode" COLUMN TO PREVENT ERROR LATER ON
RSeg_data <- RSeg_data[,-max(which(grepl("hydrocode",colnames(RSeg_data),fixed = TRUE)==TRUE))]
# REMOVE ANY WITH EMPTY GEOMETRY FIELD (NEEDED PRIOR TO GEOPROCESSING)
RSeg_valid_geoms <- paste("SELECT *
FROM RSeg_data
WHERE geom != ''")
RSeg_data <- sqldf(RSeg_valid_geoms)
######################################################################################################
### GENERATE MAPS  ###################################################################################
######################################################################################################
print(paste("RETRIEVING BASEMAP:",sep=""))
tile_layer <- get_map(
location = c(left = extent$x[1],
bottom = extent$y[1],
right = extent$x[2],
top = extent$y[2]),
source = "osm", zoom = 9, maptype = "satellite" #good
)
base_layer <- ggmap(tile_layer)
base_map <- base_layer +
geom_polygon(data = MB.df,aes(x = long, y = lat, group = group), color="black", fill = NA,lwd=0.5)
base_scale <-  ggsn::scalebar(data = bbDF, location = 'bottomleft', dist = 25, dist_unit = 'mi',
transform = TRUE, model = 'WGS84',st.bottom=FALSE,
st.size = 3, st.dist = 0.03,
anchor = c(
x = (((extent$x[2] - extent$x[1])/2)+extent$x[1])-0.45,
y = extent$y[1]+(extent$y[1])*0.001
))
base_theme <- theme(legend.title = element_text(size = 7.4),
#legend.position=c(1.137, .4), #USE TO PLACE LEGEND TO THE RIGHT OF MAP
legend.position=c(1.2, .65),
plot.margin = unit(c(0.5,-0.2,0.25,-3), "cm"),
plot.title = element_text(size=12),
plot.subtitle = element_text(size=10),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank())
deqlogo <- draw_image(paste(folder,'tables_maps/HiResDEQLogo.tif',sep=''),scale = 0.175, height = 1,  x = -.384, y = 0.32)
######################################################################################################
#SUBSET THE CIA RSEGS OF INTEREST
RSeg_subset <- paste('SELECT *
FROM RSeg_data
WHERE seglist IS NOT NULL
',sep = '')
RSeg_subset <- sqldf(RSeg_subset)
RSeg_subset_centroids <- wkt_centroid(RSeg_subset$geom)
RSeg_subset <- cbind(RSeg_subset,RSeg_subset_centroids)
rseg_subset  <- st_as_sf(RSeg_subset, wkt = 'geom')
######################################################################################################
rseg_base <- st_as_sf(RSeg_data, wkt = 'geom')
source_current <- base_map + geom_sf(data = rseg_base,aes(geometry = geom),color = "black", fill = "gray55", inherit.aes = FALSE, show.legend = FALSE)+
geom_sf(data = rseg_subset,aes(geometry = geom),color = "black", fill = "lightgreen", inherit.aes = FALSE, show.legend = FALSE)
map <- ggdraw(source_current +
geom_polygon(data = MB.df,aes(x = long, y = lat, group = group), color="black", fill = NA,lwd=0.7) +
ggtitle(paste(" ",sep = '')) +
labs(subtitle = paste("Minor Basin: ",minorbasin,sep='')) +
#ADD STATE BORDER LAYER ON TOP
geom_path(data = state.df,aes(x = long, y = lat, group = group), color="gray20",lwd=0.5) +
#ADD RIVERS LAYER ON TOP
geom_path(data = rivs.df, aes(x = long, y = lat, group = group), color="dodgerblue3",lwd=0.4) +
# ADD WATERBODIES
geom_point(data = WBDF, aes(x = long, y = lat), color="dodgerblue3", size=0.09)+
#ADD BORDER
#geom_polygon(data = bbDF,aes(x = long, y = lat, group = group), color="black", fill = NA,lwd=0.5)+
#ADD RIVER LABELS
geom_text_repel(data = riv.centroid.df, aes(x = as.numeric(centroid_longitude), y = as.numeric(centroid_latitude), group = 1, label = GNIS_NAME),size = 2, color = "dodgerblue3")+
#ADD FIPS POINTS
geom_point(data = fips.df, aes(x = fips_longitude, y = fips_latitude, group = 1),size =1, shape = 20, fill = "black")+
#ADD FIPS LABELS
geom_text_repel(data = fips.df, aes(x = fips_longitude, y = fips_latitude, group = 1, label = fips_name),size = 2)+
#ADD RSEG SUBSET LABELS
#geom_text_repel(data = rseg_subset, aes(x = lng, y = lat, group = 1, label = propname),size = 2)+
##geom_label_repel(data = rseg_subset, aes(x = lng, y = lat, group = 1, label = propname),size = 2,fill="white",box.padding =1)+
#OPTION WITH LABELS SPACED OUT WITH LINE TO RSEG CENTROID
geom_label_repel(data = rseg_subset, aes(x = lng, y = lat, group = 1, label = seglist),size = 2,fill="white",box.padding =1)+
#OPTION WITH LABELS RIGHT AT RSEG CENTROID
#geom_label(data = rseg_subset, aes(x = lng, y = lat, group = 1, label = seglist),size = 2,fill="white")+
#ADD NORTH BAR
north(bbDF, location = 'topright', symbol = 3, scale=0.12) +
base_scale +
base_theme) +
deqlogo
return(map)
} # CLOSE FUNCTION CIA_maps()
source(paste(github_location,"/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/CIA_maps.R",sep = '/'))
source(paste(github_location,"/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/CIA_maps.R",sep = '/'))
github_location
library(devtools)
map_layers <- load_MapLayers(site = "http://deq2.bse.vt.edu/d.dh") #WARNING - DO NOT ATTEMPT TO OUTPUT map_layers DIRECTLY TO YOUR CONSOLE, ITS A LIST OF MANY LARGE MAPPING LAYERS
map_layers <- load_MapLayers(site = "http://deq2.bse.vt.edu/d.dh") #WARNING - DO NOT ATTEMPT TO OUTPUT map_layers DIRECTLY TO YOUR CONSOLE, ITS A LIST OF MANY LARGE MAPPING LAYERS
cia_map <- CIA_maps(cia_data = cia_df, map_layers = map_layers)
ggsave(paste0(export_path,riv_seg,"_cia_map.png",sep = ""), width=5.5, height=5)
devtools::install_github("ropensci/wicket")
url <- "http://https://cran.r-project.org/src/contrib/Archive/wicket/wicket_0.2.0.tar.gz_"
pkgFile <- "RecordLinkage_0.4-1.tar.gz"
download.file(url = url, destfile = pkgFile)
url <- "http://https://cran.r-project.org/src/contrib/Archive/wicket/wicket_0.2.0.tar.gz"
pkgFile <- "wicket_0.2.0.tar.gz"
download.file(url = url, destfile = pkgFile)
url <- "https://cran.r-project.org/src/contrib/Archive/wicket/wicket_0.2.0.tar.gz"
pkgFile <- "wicket_0.2.0.tar.gz"
download.file(url = url, destfile = pkgFile)
install.packages(pkgs=pkgFile, type="source", repos=NULL)
library(Rcpp)
install.packages(pkgs=pkgFile, type="source", repos=NULL)
library(wicket) #wkt_centroid()
library(ggplot2)
library(rgeos)
library(ggsn)
library(rgdal) # needed for readOGR()
library(dplyr) # needed for case_when()
library(sf) # needed for st_read()
library(sqldf)
library(kableExtra)
library(viridis) #magma
library(wicket) #wkt_centroid()
library(cowplot) #plot static legend
library(magick) #plot static legend
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
#RUN THIS BEFORE CLICKLING "RUN APP"
site <- "http://deq2.bse.vt.edu/d.dh"
basepath <-'/var/www/R'
source(paste(basepath,'config.R',sep='/'))
source(paste(github_location,"/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/CIA_maps.R",sep = '/'))
runApp('C:/Users/nabra/Desktop/HARP/GitHub/HARParchive/HARP-2020-2021/Cumulative Impact River Mile/shiny app development/cia_test_app_reactive.R')
